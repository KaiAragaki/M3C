names <- names(CV)[CV>cvx]
data3 <- subset(data2, row.names(data2) %in% names)
nrow(data3)
}else{
data3 <- data
}
#colnames(meta)[43] <- 'ID'
colnames(meta)[colnames(meta)=='Seq_ID.V2'] <- 'ID'
### clustering
source('~/Desktop/scripts/AEC_early.R')
res <- AEC(data3,weightedgraph=TRUE,stabilitysearch=FALSE)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')])
fisher.test(table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')]))
## 50% improvement
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
res <- AEC(data3,weightedgraph=TRUE,stabilitysearch=FALSE)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')])
fisher.test(table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')]))
## 50% improvement
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
res <- AEC(data3,weightedgraph=TRUE,stabilitysearch=FALSE)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')])
fisher.test(table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')]))
## 50% improvement
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
res <- AEC(data3,weightedgraph=TRUE,stabilitysearch=FALSE)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')])
fisher.test(table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')]))
## 50% improvement
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
res <- AEC(data3,weightedgraph=TRUE,stabilitysearch=FALSE)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')])
fisher.test(table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')]))
## 50% improvement
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
res <- Spectrum::Spectrum(data3)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')])
fisher.test(table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')]))
## 50% improvement
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
res <- M3C(data3,method=2,clusteralg='hc')
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
source('~/Desktop/scripts/AEC_early.R')
res <- M3C(data3,method=2)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
res <- AEC(data3,weightedgraph=TRUE,stabilitysearch=FALSE)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
library(M3C)
library(edgeR)
library(limma)
library(ComplexHeatmap)
load("~/Desktop/R4RA/R4RA_V2_data_trimmed.RData")
source('~/Desktop/R4RA/SCRIPTS/reformat_IDs_functions.R')
### parameters
# features
modules <- FALSE
custom_list <- TRUE # set to FALSE for unsupervised clustering
degs <- 'ritux_cdai' # ritux or tocil DEGs
protein <- FALSE # set to TRUE for unsupervised clustering
library(M3C)
library(edgeR)
library(limma)
library(ComplexHeatmap)
load("~/Desktop/R4RA/R4RA_V2_data_trimmed.RData")
source('~/Desktop/R4RA/SCRIPTS/reformat_IDs_functions.R')
### parameters
# features
modules <- FALSE
custom_list <- TRUE # set to FALSE for unsupervised clustering
degs <- 'ritux_cdai' # ritux or tocil DEGs
protein <- FALSE # set to TRUE for unsupervised clustering
# drug filtering
drugf <- TRUE
drug <- 'Rituximab' # Tocilizumab, Rituximab
# outliers
cutoff <- 'hard' # hard, soft, none
# variability and expression strength filtering
filtering <- FALSE # set to TRUE for unsupervised clustering
cvx <- 0.125 # 0.125 initial clustering
### main script
## get the data out
data <- txiready$vst
colnames(data) <- gsub('\\.','-',colnames(data))
colnames(data) <- substring(colnames(data), 2)
## remove outliers
if (cutoff == 'soft'){
outliers <- read.csv('/home/christopher/Desktop/R4RA/outliers_soft_cutoff.csv')
outliers$ID <- as.character(outliers$ID)
data <- data[ , -which(names(data) %in% outliers$ID)] # 12 initial outliers
}else if (cutoff == 'hard'){
outliers <- read.csv('~/Desktop/R4RA/outliers_trimmed_1.csv',sep=',')
outliers$ID <- as.character(outliers$ID)
data <- data[ , -which(names(data) %in% outliers$ID)] # 12 initial outliers
}
#
data <- fix_colnames(data)
# get the metadata
meta <- read.csv('/home/christopher/Desktop/R4RA/meta_data_V8_imp.csv')
meta <- subset(meta, meta$Visit == 3)
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
#meta <- completeFun(meta, "CDAI.response.status")
if (drugf){
# select based on medication, levels: Rituximab Tocilizumab
meta <- subset(meta, meta$Randomised.medication == drug)
}
meta$Seq_ID.V2 <- as.character(meta$Seq_ID.V2)
meta$Seq_ID.V2 <- gsub('\\.','-',meta$Seq_ID.V2)
meta$Seq_ID.V2 <- paste(meta$Seq_ID.V2,'-Baseline',sep='')
meta <- subset(meta, meta$Seq_ID.V2 %in% colnames(data))
data <- data[,meta$Seq_ID.V2]
# optionally just select the protein coding genes
if (protein){
mappings <- read.csv('~/Desktop/R4RA/gencode.v29.mappings.tsv',sep='\t',header=FALSE)
protein_coding <- subset(mappings, mappings$V3 == 'protein_coding')
protein_coding$V3 <- as.character(protein_coding$V3)
protein_coding$V2 <- as.character(protein_coding$V2)
row.names(protein_coding) <- NULL
data <- subset(data, row.names(data) %in% protein_coding$V2)
}
data_backup <- data # save for boxplots
# select the DEGs
if (custom_list){
if (choice_genes == 'ritux_cdai'){
sig_genes <- read.csv('~/Desktop/R4RA/3_differential_expression/CDAI.50.rituximab.limma.degs.csv')
sig_genes <- subset(sig_genes, sig_genes$q.Val < 0.025)
data <- subset(data, row.names(data) %in% sig_genes$X)
}else if (choice_genes == 'ritux_eular'){
sig_genes <- read.csv('~/Desktop/R4RA/3_differential_expression/EULAR3.ritux.limma.degs.csv')
sig_genes <- subset(sig_genes, sig_genes$q.Val < 0.005)
data <- subset(data, row.names(data) %in% sig_genes$X)
}else if (choice_genes == 'tocil_eular'){
sig_genes <- read.csv('~/Desktop/R4RA/3_differential_expression/EULAR3.tocil.limma.degs.csv')
sig_genes <- subset(sig_genes, sig_genes$q.Val < 0.005)
data <- subset(data, row.names(data) %in% sig_genes$X)
}else if (choice_genes == 'tocil_cdai'){
sig_genes <- read.csv('~/Desktop/R4RA/3_differential_expression/CDAI.50.tocil.limma.degs.csv')
sig_genes <- subset(sig_genes, sig_genes$q.Val < 0.005)
data <- subset(data, row.names(data) %in% sig_genes$X)
}
}
if (modules){
source('~/Desktop/scripts/mergedatausingmodulesV3.R')
data <- mergemodules(data,type='r4ra',method='zmean')
colnames(data) <- gsub('\\.','-',colnames(data))
data3 <- data
# variable gene filter
CV <- apply(data3,1,sd)/(rowMeans(data3))
names <- names(CV)[CV>cvx]
data3 <- subset(data3, row.names(data3) %in% names)
nrow(data3)
}
if (filtering){
# filter for just the strongest expressed genes
tokeep <- row.names(txiraw$txistd$counts[ rowSums((cpm(txiraw$txistd$counts))>1)>=10, ])
data2 <- subset(data, row.names(data) %in% tokeep)
# variable gene filter
CV <- apply(data2,1,sd)/(rowMeans(data2))
names <- names(CV)[CV>cvx]
data3 <- subset(data2, row.names(data2) %in% names)
nrow(data3)
}else{
data3 <- data
}
#colnames(meta)[43] <- 'ID'
colnames(meta)[colnames(meta)=='Seq_ID.V2'] <- 'ID'
### clustering
source('~/Desktop/scripts/AEC_early.R')
res <- AEC(data3,weightedgraph=TRUE,stabilitysearch=FALSE)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')])
fisher.test(table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')]))
## 50% improvement
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
res <- AEC(data3,weightedgraph=TRUE,stabilitysearch=FALSE)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')])
fisher.test(table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')]))
## 50% improvement
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
res <- AEC(data3,weightedgraph=TRUE,stabilitysearch=FALSE)
# reorder data according to any clustering algorithm
ind <- sort(as.vector(res$assignments),index.return=TRUE)
datax <- data3[,ind$ix]
annonx <- meta[ind$ix,]
annonx$consensuscluster <- as.factor(as.character(ind$x))
### optional reordering of consensus clusters manually
# reorder <- FALSE # FALSE for ritux, TRUE for tocil
# if (reorder){
#   ## reorder consensus clusters manually
#   newv <- as.factor(c(2,3,1)) # tocil: 2,3,1
#   annonx <- annonx[order(match(annonx$consensuscluster, newv)),] # reorder clinical
#   annonx$consensuscluster <- as.character(1:length(newv))[ match(annonx$consensuscluster, as.character(unique(annonx$consensuscluster)) ) ]
#   colnames(datax) <- gsub('\\.','-',colnames(datax)) # reformatting
#   datax <- datax[,row.names(annonx)] # get in right order -- change for PEAC vs R4RA
# }
### statistical analysis
## EULAR CRP
table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')])
fisher.test(table(annonx[c('consensuscluster','DAS28.CRP.EULARresp.V7')]))
## 50% improvement
table(annonx[c('consensuscluster','CDAI.response.status.V7')])
fisher.test(table(annonx[c('consensuscluster','CDAI.response.status.V7')]))
library(M3C)
library(edgeR)
library(limma)
library(ComplexHeatmap)
load("~/Desktop/R4RA/R4RA_V2_data_trimmed.RData")
source('~/Desktop/R4RA/SCRIPTS/reformat_IDs_functions.R')
### parameters
# features
modules <- FALSE
custom_list <- TRUE # set to FALSE for unsupervised clustering
degs <- 'ritux_cdai' # ritux or tocil DEGs
protein <- FALSE # set to TRUE for unsupervised clustering
# drug filtering
drugf <- TRUE
drug <- 'Rituximab' # Tocilizumab, Rituximab
# outliers
cutoff <- 'hard' # hard, soft, none
# variability and expression strength filtering
filtering <- FALSE # set to TRUE for unsupervised clustering
cvx <- 0.125 # 0.125 initial clustering
### main script
## get the data out
data <- txiready$vst
colnames(data) <- gsub('\\.','-',colnames(data))
colnames(data) <- substring(colnames(data), 2)
## remove outliers
if (cutoff == 'soft'){
outliers <- read.csv('/home/christopher/Desktop/R4RA/outliers_soft_cutoff.csv')
outliers$ID <- as.character(outliers$ID)
data <- data[ , -which(names(data) %in% outliers$ID)] # 12 initial outliers
}else if (cutoff == 'hard'){
outliers <- read.csv('~/Desktop/R4RA/outliers_trimmed_1.csv',sep=',')
outliers$ID <- as.character(outliers$ID)
data <- data[ , -which(names(data) %in% outliers$ID)] # 12 initial outliers
}
#
data <- fix_colnames(data)
# get the metadata
meta <- read.csv('/home/christopher/Desktop/R4RA/meta_data_V8_imp.csv')
meta <- subset(meta, meta$Visit == 3)
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
#meta <- completeFun(meta, "CDAI.response.status")
if (drugf){
# select based on medication, levels: Rituximab Tocilizumab
meta <- subset(meta, meta$Randomised.medication == drug)
}
meta$Seq_ID.V2 <- as.character(meta$Seq_ID.V2)
meta$Seq_ID.V2 <- gsub('\\.','-',meta$Seq_ID.V2)
meta$Seq_ID.V2 <- paste(meta$Seq_ID.V2,'-Baseline',sep='')
meta <- subset(meta, meta$Seq_ID.V2 %in% colnames(data))
data <- data[,meta$Seq_ID.V2]
# optionally just select the protein coding genes
if (protein){
mappings <- read.csv('~/Desktop/R4RA/gencode.v29.mappings.tsv',sep='\t',header=FALSE)
protein_coding <- subset(mappings, mappings$V3 == 'protein_coding')
protein_coding$V3 <- as.character(protein_coding$V3)
protein_coding$V2 <- as.character(protein_coding$V2)
row.names(protein_coding) <- NULL
data <- subset(data, row.names(data) %in% protein_coding$V2)
}
data_backup <- data # save for boxplots
# select the DEGs
if (custom_list){
if (choice_genes == 'ritux_cdai'){
sig_genes <- read.csv('~/Desktop/R4RA/3_differential_expression/CDAI.50.rituximab.limma.degs.csv')
sig_genes <- subset(sig_genes, sig_genes$q.Val < 0.025)
data <- subset(data, row.names(data) %in% sig_genes$X)
}else if (choice_genes == 'ritux_eular'){
sig_genes <- read.csv('~/Desktop/R4RA/3_differential_expression/EULAR3.ritux.limma.degs.csv')
sig_genes <- subset(sig_genes, sig_genes$q.Val < 0.005)
data <- subset(data, row.names(data) %in% sig_genes$X)
}else if (choice_genes == 'tocil_eular'){
sig_genes <- read.csv('~/Desktop/R4RA/3_differential_expression/EULAR3.tocil.limma.degs.csv')
sig_genes <- subset(sig_genes, sig_genes$q.Val < 0.005)
data <- subset(data, row.names(data) %in% sig_genes$X)
}else if (choice_genes == 'tocil_cdai'){
sig_genes <- read.csv('~/Desktop/R4RA/3_differential_expression/CDAI.50.tocil.limma.degs.csv')
sig_genes <- subset(sig_genes, sig_genes$q.Val < 0.005)
data <- subset(data, row.names(data) %in% sig_genes$X)
}
}
if (modules){
source('~/Desktop/scripts/mergedatausingmodulesV3.R')
data <- mergemodules(data,type='r4ra',method='zmean')
colnames(data) <- gsub('\\.','-',colnames(data))
data3 <- data
# variable gene filter
CV <- apply(data3,1,sd)/(rowMeans(data3))
names <- names(CV)[CV>cvx]
data3 <- subset(data3, row.names(data3) %in% names)
nrow(data3)
}
if (filtering){
# filter for just the strongest expressed genes
tokeep <- row.names(txiraw$txistd$counts[ rowSums((cpm(txiraw$txistd$counts))>1)>=10, ])
data2 <- subset(data, row.names(data) %in% tokeep)
# variable gene filter
CV <- apply(data2,1,sd)/(rowMeans(data2))
names <- names(CV)[CV>cvx]
data3 <- subset(data2, row.names(data2) %in% names)
nrow(data3)
}else{
data3 <- data
}
#colnames(meta)[43] <- 'ID'
colnames(meta)[colnames(meta)=='Seq_ID.V2'] <- 'ID'
### clustering
source('~/Desktop/scripts/AEC_early.R')
